# 딥러닝 개념

# 전처리 선언
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_boston

#1. 데이타
datasets = load_boston()
x = datasets.data
y = datasets.target

# print("x: ", x)
# print("y: ", y)
print("shape: ", x.shape)   # 2차원 배열 (506, 13)
print("shape: ", y.shape)   # 1차원 배열 (506, )

x_train, x_test, y_train, y_test = train_test_split(    # 트레이닝 / 검증 데이타 분류
                                x, y,
                                train_size = 0.81,
                                # test_size = 0.3,
                                shuffle = True,
                                random_state = 1333
)

#2. 모델
model = Sequential()                    # 순차적인 학습
model.add(Dense(30, input_dim=13))      # 인풋 레이어
model.add(Dense(40))
model.add(Dense(50))
model.add(Dense(60))
model.add(Dense(70))
model.add(Dense(80))
model.add(Dense(100))
model.add(Dense(150))
model.add(Dense(50))
model.add(Dense(30))
model.add(Dense(10))
model.add(Dense(5))
model.add(Dense(1))                     # 아웃풋 레이어

#3. 컴파일
model.compile(loss = "mae", optimizer = "adam")             # compile: 컴파일
model.fit(x_train, y_train, epochs = 3, batch_size = 13)    # fit: 훈련 (트레이닝 데이타)

#4. 평가, 예측 (학습된 모델로)
loss = model.evaluate(x_test, y_test)                       # evaluate: 평가 (테스트 데이타)
print("loss: ", loss)

y_predict = model.predict(x_test)                           # predict: 예측 (인풋(x_test) 테스트 데이타 예측)

from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_predict)                            # r2_score: 2차 평가 (y테스트 데이타와 y 예측값 비교)
print("r2_score : ", r2)
